{"version":3,"sources":["Avatarlist.js","Avatar.js","serviceWorker.js","index.js"],"names":["Avatarlist","props","className","src","name","alt","work","Avatar","state","this","setState","avatarlistarray","id","arrayavtarcard","map","avatarcard","i","key","onClick","namechange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAaeA,G,YAXI,SAACC,GAChB,OAEI,yBAAKC,UAAU,4DACP,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,WAC9D,wBAAIH,UAAU,IAAID,EAAMG,MACzB,2BAAIH,EAAMK,SC6DPC,E,kDA5DX,aACC,IAAD,8BACI,gBACKC,MACL,CACIJ,KAAK,4BAJb,E,yDAUIK,KAAKC,SACJ,CACGN,KAAK,2C,+BAIZ,IAAD,OAEOO,EACH,CACC,CACGC,GAAG,EACHR,KAAK,SACLE,KAAK,gBAER,CACGM,GAAG,EACHR,KAAK,MACLE,KAAK,qBAEP,CACEM,GAAG,EACHR,KAAK,SACLE,KAAK,YAEP,CACEM,GAAG,EACHR,KAAK,OACLE,KAAK,YAILO,EAAiBF,EAAgBG,KAAI,SAACC,EAAWC,GAEnD,OAAQ,kBAAC,EAAD,CAAYC,IAAKD,EAAGJ,GAAID,EAAgBK,GAAGZ,KACnDA,KAAMO,EAAgBK,GAAGZ,KACzBE,KAAMK,EAAgBK,GAAGV,UAE9B,OACA,yBAAKJ,UAAU,YACX,gCAAMO,KAAKD,MAAMJ,KAAjB,KACES,EACA,4BAAQK,QAAU,kBAAM,EAAKC,eAA7B,mB,GAxDUC,aCMDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a78bddc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Avatarlist = (props) => {\r\n    return (\r\n            \r\n        <div className=\"avatarstyle ma4 bg-light-purple dib pa3 grow shadow-4 tc\">\r\n                <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"Avatar\" />\r\n             <h1 className=\"\">{props.name}</h1>\r\n            <p>{props.work}</p>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Avatarlist;","import React, { Component } from 'react';\r\n\r\nimport './Avatar.css';\r\nimport 'tachyons';\r\nimport Avatarlist from './Avatarlist';\r\n\r\nclass Avatar extends Component\r\n{\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state =\r\n        {\r\n            name:\" Welcome to Avatar World\"\r\n        }\r\n    }\r\n\r\n    namechange()\r\n    {\r\n        this.setState\r\n        ({\r\n            name:\"Subscribe to vishal technical chanel\"\r\n        })\r\n    }\r\n    render()\r\n    {\r\n    \r\n     const avatarlistarray = \r\n        [\r\n         {\r\n            id:1,\r\n            name:\"Vishal\",\r\n            work:\"Web devloper\"\r\n         },\r\n         {\r\n            id:2,\r\n            name:\"CDK\",\r\n            work:\"Software devloper\"\r\n          },\r\n          {\r\n            id:3,\r\n            name:\"Alpesh\",\r\n            work:\"DataBase\"\r\n          },\r\n          {\r\n            id:4,\r\n            name:\"Kaka\",\r\n            work:\"BackEnd\"\r\n          }\r\n        ]\r\n\r\n      const arrayavtarcard = avatarlistarray.map((avatarcard,i) =>\r\n        {\r\n          return  <Avatarlist key={i} id={avatarlistarray[i].name} \r\n          name={avatarlistarray[i].name}\r\n          work={avatarlistarray[i].work} />\r\n        })\r\n     return ( \r\n     <div className=\"mainpage\">\r\n         <h1> {this.state.name} </h1>\r\n          {arrayavtarcard}\r\n           <button onClick={ () => this.namechange() }> Subcribe </button>\r\n         </div>\r\n      )\r\n    }\r\n}\r\n\r\n\r\nexport default Avatar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Avatar from './Avatar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Avatar />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}